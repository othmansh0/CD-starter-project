name: Build on Comment

on:
  issue_comment:
    types: [created]

permissions:
  issues: write
  pull-requests: write
  checks: read
  actions: read
  contents: read

jobs:
  debug-build-comment:
    runs-on: ubuntu-latest
    steps:
      - name: Debug comment event
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Issue number: ${{ github.event.issue.number }}"
          echo "Comment body: ${{ github.event.comment.body }}"
          echo "Is pull request: ${{ github.event.issue.pull_request != null }}"
          echo "Pull request URL: ${{ github.event.issue.pull_request }}"
          
  build-comment:
    if: github.event.issue.pull_request != null && contains(github.event.comment.body, '.build')
    runs-on: macos-15
    steps:
      - name: Announce build start
        run: |
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -X POST \
            -d '{"body":"üöÄ Build triggered by comment! Starting build process..."}' \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"

      - name: Get PR info
        id: pr_info
        run: |
          PR_URL="${{ github.event.issue.pull_request.url }}"
          PR_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$PR_URL")
          BRANCH=$(echo "$PR_DATA" | jq -r '.head.ref')
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "PR branch: $BRANCH"

      - name: Validate branch
        id: validate_branch
        run: |
          BRANCH="${{ steps.pr_info.outputs.branch }}"
          # Allow develop branch and feature branches for testing
          if [[ "$BRANCH" != "develop" && "$BRANCH" != feature/* ]]; then
            echo "‚ùå Build can only be triggered from develop or feature branches. Current branch: $BRANCH"
            curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -X POST \
              -d '{"body":"‚ùå Build can only be triggered from develop or feature branches. Current branch: '"$BRANCH"'"}' \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"
            exit 1
          fi
          echo "‚úÖ Branch validation passed: $BRANCH"

      - name: Check test status
        id: check_tests
        run: |
          # Get the PR's commit SHA
          PR_URL="${{ github.event.issue.pull_request.url }}"
          PR_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$PR_URL")
          COMMIT_SHA=$(echo "$PR_DATA" | jq -r '.head.sha')
          
          # Check for test workflow runs on this commit
          CHECK_RUNS_URL="https://api.github.com/repos/${{ github.repository }}/commits/$COMMIT_SHA/check-runs"
          CHECK_RUNS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$CHECK_RUNS_URL")
          
          # Look for test workflow
          TEST_STATUS=$(echo "$CHECK_RUNS" | jq -r '.check_runs[] | select(.name == "test") | .conclusion')
          
          echo "Test status found: $TEST_STATUS"
          
          # For testing purposes, allow build even if no tests found or if tests are pending
          if [[ "$TEST_STATUS" == "failure" ]]; then
            echo "‚ùå Tests have failed. Build cannot proceed."
            curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -X POST \
              -d '{"body":"‚ùå Tests have failed. Build cannot proceed."}' \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"
            exit 1
          elif [[ "$TEST_STATUS" == "success" ]]; then
            echo "‚úÖ Tests have passed, proceeding with build"
          else
            echo "‚ö†Ô∏è No test results found or tests pending. Proceeding with build for testing purposes."
            curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -X POST \
              -d '{"body":"‚ö†Ô∏è No test results found or tests pending. Proceeding with build for testing purposes."}' \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr_info.outputs.branch }}

      - name: Setup Xcode
        run: sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Debug Fastlane Configuration
        run: |
          echo "=== Current Directory ==="
          pwd
          ls -la
          echo ""
          echo "=== Fastfile Content ==="
          cat fastlane/Fastfile
          echo ""
          echo "=== Gemfile Content ==="
          cat Gemfile
          echo ""
          echo "=== Bundle Info ==="
          bundle list | grep fastlane
          echo ""
          echo "=== Environment Variables ==="
          echo "APP_STORE_CONNECT_API_KEY_ID: ${APP_STORE_CONNECT_API_KEY_ID:+SET}"
          echo "APP_STORE_CONNECT_API_ISSUER_ID: ${APP_STORE_CONNECT_API_ISSUER_ID:+SET}"
          echo "APP_STORE_CONNECT_API_KEY_CONTENT: ${APP_STORE_CONNECT_API_KEY_CONTENT:+SET}"
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}

      - name: Clear Fastlane Cache
        run: |
          rm -rf ~/.fastlane
          rm -rf /tmp/fastlane*
          rm -f AuthKey.p8

      - name: Run Fastlane Build
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        run: bundle exec fastlane ci_build

      - name: Announce success
        if: success()
        run: |
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -X POST \
            -d '{"body":"‚úÖ Build completed successfully! üéâ"}' \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"

      - name: Announce failure
        if: failure()
        run: |
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -X POST \
            -d '{"body":"‚ùå Build failed! Please check the workflow logs for details."}' \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments" 