# This script defines a GitHub Actions workflow that is triggered when a pull request is made to the `develop` branch, or when manually dispatched.        

name: CD starter project testing workflow # Workflow name
run-name: Run by @${{ github.actor }}  # Workflow runner
on:  
  workflow_dispatch: # Trigger the workflow when it is manually dispatched  
  pull_request: # Trigger the workflow when a pull request is made  
    branches: [ "develop" ] # Only trigger the workflow when the pull request is made to the `develop` branch    
jobs:  
  test: # Define a job named 'test'  
    runs-on: macos-latest # Run the job on the `macos-latest` operating system  
    steps:  
    - uses: actions/checkout@v4 # Use the `actions/checkout` action to check out the repository's code  
    - name: Select Xcode Version
      run: |
        sudo xcode-select -s /Applications/Xcode_16.2.app/Contents/Developer
        echo "DEVELOPER_DIR=/Applications/Xcode_16.2.app/Contents/Developer" >> "$GITHUB_ENV"
    - name: Install dependencies
      run: |
        bundle install
    - name: List available simulators
      run: xcrun simctl list devices
          - name: Resolve simulator destination (ultra-simple approach)
        shell: bash
        run: |
          set -euo pipefail
                  echo "=== Ultra-Simple Simulator Resolution ==="
          echo "Finding any iPhone 16 Pro, ignoring OS version to avoid SDK conflicts"
        
                  # Find any iPhone 16 Pro, don't care about OS version
          UDID=$(xcrun simctl list devices | grep "iPhone 16 Pro" | head -1 | sed -E 's/.*\(([A-F0-9-]+)\).*/\1/')
        
                  if [ -z "${UDID}" ]; then
            echo "No iPhone 16 Pro found, trying iPhone 16..."
            UDID=$(xcrun simctl list devices | grep "iPhone 16 (" | head -1 | sed -E 's/.*\(([A-F0-9-]+)\).*/\1/')
            NAME="iPhone 16"
          else
            NAME="iPhone 16 Pro"
          fi
        
                  if [ -z "${UDID}" ]; then
            echo "::error::No compatible iPhone simulator found"
            echo "=== Available simulators ==="
            xcrun simctl list devices
            exit 1
          fi
        
                  # NO OS VERSION in destination - let xcodebuild pick best available
          DEST="platform=iOS Simulator,name=${NAME}"
          
          echo "âœ… Found: ${NAME} (${UDID})"
          echo "ðŸ“± Using simple destination: ${DEST}"
          echo "ðŸŽ¯ No OS version specified - xcodebuild will use best available"
          
          echo "SCAN_DESTINATION=${DEST}" >> "$GITHUB_ENV"
          echo "SIMULATOR_UDID=${UDID}" >> "$GITHUB_ENV"
    - name: Boot simulator
      run: |
        set -euo pipefail
        echo "Booting simulator $SIMULATOR_UDID"
        xcrun simctl boot "$SIMULATOR_UDID" || true
        xcrun simctl bootstatus "$SIMULATOR_UDID" -b
    - name: Run Tests
      env:
        FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: "90"
        FASTLANE_XCODEBUILD_SETTINGS_RETRIES: "4"
      run: |
        bundle exec fastlane test  