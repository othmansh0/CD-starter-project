# This script defines a GitHub Actions workflow that is triggered when a pull request is made to the `develop` branch, or when manually dispatched.        

name: CD starter project testing workflow # Workflow name
run-name: Run by @${{ github.actor }}  # Workflow runner
on:  
  workflow_dispatch: # Trigger the workflow when it is manually dispatched  
  pull_request: # Trigger the workflow when a pull request is made  
    branches: [ "develop" ] # Only trigger the workflow when the pull request is made to the `develop` branch    
jobs:  
  test: # Define a job named 'test'  
    runs-on: macos-latest # Run the job on the `macos-latest` operating system  
    steps:  
    - uses: actions/checkout@v4 # Use the `actions/checkout` action to check out the repository's code  
    - name: Select Xcode Version
      run: |
        sudo xcode-select -s /Applications/Xcode_16.2.app/Contents/Developer
        echo "DEVELOPER_DIR=/Applications/Xcode_16.2.app/Contents/Developer" >> "$GITHUB_ENV"
    - name: Install dependencies
      run: |
        bundle install
    - name: List available simulators
      run: xcrun simctl list devices
    - name: Resolve simulator destination
      shell: bash
      run: |
        set -euo pipefail
        # Prefer newest runtimes available on the runner
        # Prefer 18.4 first â€” observed to work reliably with Xcode 16.2 on runners
        OS_LIST=("18.4" "18.5" "18.6")
        NAME="iPhone 16 Pro"
        DEST=""
        UDID=""
        for os in "${OS_LIST[@]}"; do
          # Find first matching device line under the iOS <os> block
          line=$(xcrun simctl list devices | awk -v os="$os" 'BEGIN{f=0} $0 ~ "-- iOS "os" --"{f=1; next} /^-- iOS /{if(f) exit} f && $0 ~ /iPhone 16 Pro \(/ {print; exit}')
          if [ -n "${line}" ]; then
            UDID=$(echo "$line" | sed -E 's/.*\(([A-F0-9-]+)\).*/\1/')
            DEST="platform=iOS Simulator,name=${NAME},OS=${os}"
            break
          fi
        done
        if [ -z "${DEST}" ]; then
          # Fallback to plain iPhone 16 if Pro unavailable
          NAME="iPhone 16"
          for os in "${OS_LIST[@]}"; do
            line=$(xcrun simctl list devices | awk -v os="$os" 'BEGIN{f=0} $0 ~ "-- iOS "os" --"{f=1; next} /^-- iOS /{if(f) exit} f && $0 ~ /iPhone 16 \(/ {print; exit}')
            if [ -n "${line}" ]; then
              UDID=$(echo "$line" | sed -E 's/.*\(([A-F0-9-]+)\).*/\1/')
              DEST="platform=iOS Simulator,name=${NAME},OS=${os}"
              break
            fi
          done
        fi
        if [ -z "${DEST}" ] || [ -z "${UDID}" ]; then
          echo "::error::Failed to resolve a simulator destination"
          xcrun simctl list devices
          exit 1
        fi
        echo "Resolved destination: ${DEST} (udid=${UDID})"
        echo "SCAN_DESTINATION=${DEST}" >> "$GITHUB_ENV"
        echo "SIMULATOR_OS=${os}" >> "$GITHUB_ENV"
        echo "SIMULATOR_UDID=${UDID}" >> "$GITHUB_ENV"
    - name: Boot simulator
      run: |
        set -euo pipefail
        echo "Booting simulator $SIMULATOR_UDID"
        xcrun simctl boot "$SIMULATOR_UDID" || true
        xcrun simctl bootstatus "$SIMULATOR_UDID" -b
    - name: Run Tests
      env:
        FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: "90"
        FASTLANE_XCODEBUILD_SETTINGS_RETRIES: "4"
      run: |
        bundle exec fastlane test  