default_platform(:ios)

platform :ios do
  desc "Run tests"
  lane :test do
    run_tests(
      project: "CD starter project.xcodeproj",
      scheme: "CD starter project",
      device: "iPhone 16",
      only_testing: ["CD starter projectTests"]
    )
  end

  desc "üîß SETUP: Create missing provisioning profiles"
  lane :setup_profiles do
    key_id = ENV["API_KEY_ID"]
    issuer_id = ENV["API_ISSUER_ID"]
    key_content = ENV["API_KEY_BASE64"]
    
    puts "üîß SETUP: Creating missing provisioning profiles"
    puts "üìã This will create the App Store and Development profiles needed for builds"
    
    # Ensure we have all required API keys
    unless key_id && issuer_id && key_content &&
           !key_id.empty? && !issuer_id.empty? && !key_content.empty?
      UI.user_error!("‚ùå Missing App Store Connect API credentials. Please configure API_KEY_ID, API_ISSUER_ID, and API_KEY_BASE64 secrets.")
    end
    
    puts "üîë Setting up App Store Connect API key..."
    app_store_connect_api_key(
      key_id: key_id,
      issuer_id: issuer_id,
      key_content: key_content,
      is_key_content_base64: true,
      duration: 1200,
      in_house: false
    )
    puts "‚úÖ API key setup successful"
    
    bundle_id = "com.othmanshahrouri.cd.starter.project"
    team_id = ENV['DEVELOPMENT_TEAM'] || "F62HZKRPDV"
    
    puts "üèóÔ∏è  Creating provisioning profiles for #{bundle_id}..."
    
    begin
      puts "üì± Creating Development provisioning profile..."
      # Create Development profile
      get_provisioning_profile(
        app_identifier: bundle_id,
        type: "development",
        force: true,
        team_id: team_id,
        filename: "Development_#{bundle_id}.mobileprovision"
      )
      puts "‚úÖ Development profile created successfully"
    rescue => e
      puts "‚ö†Ô∏è  Development profile creation failed: #{e.message}"
    end
    
    begin
      puts "üè™ Creating App Store provisioning profile..."
      # Create App Store profile  
      get_provisioning_profile(
        app_identifier: bundle_id,
        type: "appstore",
        force: true,
        team_id: team_id,
        filename: "AppStore_#{bundle_id}.mobileprovision"
      )
      puts "‚úÖ App Store profile created successfully"
    rescue => e
      puts "‚ö†Ô∏è  App Store profile creation failed: #{e.message}"
    end
    
    puts ""
    puts "üéØ SETUP COMPLETE"
    puts "üìã Provisioning profiles have been created. Now try building again!"
    puts "üí° Use /build to test App Store build or /diagnostic to test Development build"
  end

  desc "üîç DIAGNOSTIC: Test API key permissions (no build)"
  lane :diagnostic_api_permissions do
    key_id = ENV["API_KEY_ID"]
    issuer_id = ENV["API_ISSUER_ID"]
    key_content = ENV["API_KEY_BASE64"]
    
    puts "üîç DIAGNOSTIC: Testing API key permissions (no build required)"
    puts "üìã This will test if your API key can access certificates and profiles"
    
    # Ensure we have all required API keys
    unless key_id && issuer_id && key_content &&
           !key_id.empty? && !issuer_id.empty? && !key_content.empty?
      UI.user_error!("‚ùå Missing App Store Connect API credentials. Please configure API_KEY_ID, API_ISSUER_ID, and API_KEY_BASE64 secrets.")
    end
    
    puts "üîë Setting up App Store Connect API key..."
    app_store_connect_api_key(
      key_id: key_id,
      issuer_id: issuer_id,
      key_content: key_content,
      is_key_content_base64: true,
      duration: 1200,
      in_house: false
    )
    puts "‚úÖ API key setup successful"
    
    puts "üîç Testing API key permissions..."
    
    begin
      puts "üì± Testing: Can list apps..."
      # This should work with basic API key
      apps = Spaceship::ConnectAPI::App.all
      puts "‚úÖ SUCCESS: Can list apps (#{apps.count} apps found)"
    rescue => e
      puts "‚ùå FAILED: Cannot list apps - #{e.message}"
      UI.user_error!("API key lacks basic App Store Connect permissions")
    end
    
    begin
      puts "üîê Testing: Can list certificates..."
      # This tests certificate management permissions
      certs = Spaceship::ConnectAPI::Certificate.all
      puts "‚úÖ SUCCESS: Can list certificates (#{certs.count} certificates found)"
      
      # List certificate types
      certs.each do |cert|
        puts "   - #{cert.certificate_type}: #{cert.name || 'Unnamed'}"
      end
    rescue => e
      puts "‚ùå FAILED: Cannot list certificates - #{e.message}"
      puts "‚ö†Ô∏è  This indicates your API key lacks certificate management permissions"
    end
    
    begin
      puts "üìã Testing: Can list provisioning profiles..."
      # This tests provisioning profile management permissions
      profiles = Spaceship::ConnectAPI::Profile.all
      puts "‚úÖ SUCCESS: Can list provisioning profiles (#{profiles.count} profiles found)"
      
      # List profiles for our bundle ID
      matching_profiles = profiles.select { |p| p.bundle_id&.identifier == "com.othmanshahrouri.cd.starter.project" }
      puts "   - Found #{matching_profiles.count} profiles for com.othmanshahrouri.cd.starter.project"
      matching_profiles.each do |profile|
        puts "     * #{profile.profile_type}: #{profile.name} (#{profile.profile_state})"
      end
    rescue => e
      puts "‚ùå FAILED: Cannot list provisioning profiles - #{e.message}"
      puts "‚ö†Ô∏è  This indicates your API key lacks provisioning profile management permissions"
    end
    
    puts ""
    puts "üéØ DIAGNOSIS COMPLETE"
    puts "üìã If certificate or profile listing failed, your API key needs additional permissions:"
    puts "   1. Go to App Store Connect ‚Üí Users and Access ‚Üí Keys"
    puts "   2. Edit your API key"
    puts "   3. Ensure it has 'Developer' role or higher"
    puts "   4. Ensure access to 'Certificates, Identifiers & Profiles'"
    puts ""
    puts "üí° The build failures are because Xcode can't create/access certificates with current API key permissions"
  end

  desc "üß™ DIAGNOSTIC: Test Development build to prove permissions issue"
  lane :diagnostic_dev_build do
    key_id = ENV["API_KEY_ID"]
    issuer_id = ENV["API_ISSUER_ID"]
    key_content = ENV["API_KEY_BASE64"]
    
    puts "üß™ DIAGNOSTIC: Testing Development build (should succeed)"
    puts "üîç This will prove the pipeline works - only Distribution certificates are blocked"
    
    # Ensure we have all required API keys
    unless key_id && issuer_id && key_content &&
           !key_id.empty? && !issuer_id.empty? && !key_content.empty?
      UI.user_error!("‚ùå Missing App Store Connect API credentials. Please configure API_KEY_ID, API_ISSUER_ID, and API_KEY_BASE64 secrets.")
    end
    
    puts "üîë Setting up App Store Connect API key..."
    app_store_connect_api_key(
      key_id: key_id,
      issuer_id: issuer_id,
      key_content: key_content,
      is_key_content_base64: true,
      duration: 1200,
      in_house: false
    )
    puts "‚úÖ API key setup successful"
    
    puts "üèóÔ∏è  Building for Development (testing permissions)..."
    
    # Create AuthKey.p8 file from base64 content for xcodebuild authentication
    begin
      auth_key_content = Base64.decode64(ENV['API_KEY_BASE64'])
      auth_key_path = "/tmp/AuthKey_#{ENV['API_KEY_ID']}.p8"
      File.binwrite(auth_key_path, auth_key_content)
      puts "‚úÖ Created AuthKey.p8 file for xcodebuild authentication"
    rescue => e
      UI.user_error!("‚ùå Failed to create AuthKey.p8 file: #{e.message}")
    end
    
    # Enable automatic signing
    automatic_code_signing(
      use_automatic_signing: true,
      team_id: ENV['DEVELOPMENT_TEAM'] || "F62HZKRPDV"
    )

    # Download/create Development provisioning profile explicitly
    puts "üì± Ensuring Development provisioning profile exists..."
    begin
      get_provisioning_profile(
        app_identifier: "com.othmanshahrouri.cd.starter.project",
        type: "development",
        force: true,
        team_id: ENV['DEVELOPMENT_TEAM'] || "F62HZKRPDV",
        filename: "Development_Profile.mobileprovision"
      )
      puts "‚úÖ Development profile downloaded/created successfully"
    rescue => e
      puts "‚ö†Ô∏è  Development profile creation failed: #{e.message}"
      puts "üîç Continuing with build - xcodebuild may create profile automatically"
    end

    # DIAGNOSTIC: Try Development build first (should work with Developer role)
    gym(
      project: "CD starter project.xcodeproj",
      scheme: "CD starter project",
      configuration: "Debug",
      export_method: "development",
      output_directory: "./build",
      output_name: "CD_starter_project_DEV",
      clean: true,
      xcargs: "-allowProvisioningUpdates -authenticationKeyPath #{auth_key_path} -authenticationKeyID #{ENV['API_KEY_ID']} -authenticationKeyIssuerID #{ENV['API_ISSUER_ID']} DEVELOPMENT_TEAM=#{ENV['DEVELOPMENT_TEAM'] || 'F62HZKRPDV'}",
      export_options: {
        method: "development",
        signingStyle: "automatic",
        teamID: ENV['DEVELOPMENT_TEAM'] || "F62HZKRPDV"
      }
    )
    puts "‚úÖ üéâ DIAGNOSTIC SUCCESS: Development build completed!"
    puts "üîç This proves the entire CI/CD pipeline works correctly"
    puts "‚ùå The issue is Apple Developer account permissions for Distribution certificates"
    puts ""
    puts "üìã NEXT STEPS:"
    puts "   1. Request Admin or App Store Manager role on Apple Developer account"
    puts "   2. Or ask someone with Admin privileges to create Distribution certificates"
    puts "   3. Then switch back to App Store builds"
  end

  desc "Build and upload to TestFlight"
  lane :ci_build do
    key_id = ENV["API_KEY_ID"]
    issuer_id = ENV["API_ISSUER_ID"]
    key_content = ENV["API_KEY_BASE64"]
    
    puts "üîç Starting ci_build lane for TestFlight upload"
    
    # Ensure we have all required API keys
    unless key_id && issuer_id && key_content &&
           !key_id.empty? && !issuer_id.empty? && !key_content.empty?
      UI.user_error!("‚ùå Missing App Store Connect API credentials. Please configure API_KEY_ID, API_ISSUER_ID, and API_KEY_BASE64 secrets.")
    end
    
    puts "üîë Setting up App Store Connect API key..."
    app_store_connect_api_key(
      key_id: key_id,
      issuer_id: issuer_id,
      key_content: key_content,
      is_key_content_base64: true,
      duration: 1200,
      in_house: false
    )
    puts "‚úÖ API key setup successful"
    
    puts "üèóÔ∏è  Building for App Store distribution..."
    
    # Create AuthKey.p8 file from base64 content for xcodebuild authentication
    begin
      auth_key_content = Base64.decode64(ENV['API_KEY_BASE64'])
      auth_key_path = "/tmp/AuthKey_#{ENV['API_KEY_ID']}.p8"
      File.binwrite(auth_key_path, auth_key_content)
      puts "‚úÖ Created AuthKey.p8 file for xcodebuild authentication"
    rescue => e
      UI.user_error!("‚ùå Failed to create AuthKey.p8 file: #{e.message}")
    end
    
    # Enable automatic signing - let Xcode handle everything
    automatic_code_signing(
      use_automatic_signing: true,
      team_id: ENV['DEVELOPMENT_TEAM'] || "F62HZKRPDV"
    )

    # Download/create App Store provisioning profile explicitly
    puts "üè™ Ensuring App Store provisioning profile exists..."
    begin
      get_provisioning_profile(
        app_identifier: "com.othmanshahrouri.cd.starter.project",
        type: "appstore",
        force: true,
        team_id: ENV['DEVELOPMENT_TEAM'] || "F62HZKRPDV",
        filename: "AppStore_Profile.mobileprovision"
      )
      puts "‚úÖ App Store profile downloaded/created successfully"
    rescue => e
      puts "‚ö†Ô∏è  App Store profile creation failed: #{e.message}"
      puts "üîç Continuing with build - xcodebuild may create profile automatically"
    end

    gym(
      project: "CD starter project.xcodeproj",
      scheme: "CD starter project",
      configuration: "Release",
      export_method: "app-store",
      output_directory: "./build",
      output_name: "CD_starter_project",
      clean: true,
      # Pass API key credentials to xcodebuild for automatic certificate/profile management
      # Add DEVELOPMENT_TEAM to ensure proper team context
      xcargs: "-allowProvisioningUpdates -authenticationKeyPath #{auth_key_path} -authenticationKeyID #{ENV['API_KEY_ID']} -authenticationKeyIssuerID #{ENV['API_ISSUER_ID']} DEVELOPMENT_TEAM=#{ENV['DEVELOPMENT_TEAM'] || 'F62HZKRPDV'}",
      export_options: {
        method: "app-store",
        signingStyle: "automatic",
        teamID: ENV['DEVELOPMENT_TEAM'] || "F62HZKRPDV",
        # Explicitly specify we want Distribution certificate for App Store
        signingCertificate: "Apple Distribution",
        compileBitcode: false,
        uploadBitcode: false,
        uploadSymbols: true
      }
    )
    puts "‚úÖ Archive completed successfully"
    
    puts "üöÄ Uploading to TestFlight..."
    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false,
      changelog: "Automated build from CI"
    )
    puts "‚úÖ Upload to TestFlight completed"
  end
end 
