# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "üîë Setting up App Store Connect API key..."
  private_lane :setup_api_key do
    app_store_connect_api_key(
      key_id: ENV["API_KEY_ID"],
      issuer_id: ENV["API_ISSUER_ID"],
      key_content: ENV["API_KEY_BASE64"],
      is_key_content_base64: true,
      duration: 1200,
      in_house: false
    )
    UI.success("‚úÖ API key setup successful")
  end

  desc "üîß Setup CI environment with proper keychain and certificates"
  private_lane :setup_ci_environment do
    # Create a temporary keychain for CI
    create_keychain(
      name: "fastlane_tmp_keychain",
      password: "temp_password",
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false
    )
    
    # Import Apple WWDR certificates to avoid signing issues
    import_certificate(
      certificate_path: "https://developer.apple.com/certificationauthority/AppleWWDRCAG3.cer",
      keychain_name: "fastlane_tmp_keychain",
      keychain_password: "temp_password"
    )
    
    UI.success("‚úÖ CI environment setup complete")
  end

  desc "üì± Create Development certificate if needed"
  private_lane :ensure_development_certificate do
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
    
    begin
      # Try to get existing development certificate
      cert(
        development: true,
        username: ENV["APPLE_ID"] || "your_apple_id@example.com",
        team_id: ENV["DEVELOPMENT_TEAM"],
        api_key: api_key,
        keychain_name: "fastlane_tmp_keychain",
        keychain_password: "temp_password"
      )
      UI.success("‚úÖ Development certificate ready")
    rescue => ex
      UI.error("‚ö†Ô∏è Could not create development certificate: #{ex}")
      UI.important("üîç This is expected in CI - will use cloud signing")
    end
  end

  desc "üß™ DIAGNOSTIC: Test API permissions"
  lane :diagnostic_api_permissions do
    UI.header("üß™ DIAGNOSTIC: Testing API permissions")
    
    setup_api_key
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
    
    begin
      # Test listing apps
      apps = Spaceship::ConnectAPI::App.all(limit: 10)
      UI.success("‚úÖ Can list apps: #{apps.count} apps found")
      
      # Test listing certificates  
      certs = Spaceship::ConnectAPI::Certificate.all(limit: 10)
      UI.success("‚úÖ Can list certificates: #{certs.count} certificates found")
      
      # Test listing profiles
      profiles = Spaceship::ConnectAPI::Profile.all(limit: 10)
      UI.success("‚úÖ Can list provisioning profiles: #{profiles.count} profiles found")
      
      # Test app-specific profiles
      app_profiles = profiles.select { |p| p.bundle_id && p.bundle_id.identifier == "com.othmanshahrouri.cd.starter.project" }
      UI.message("üì± Profiles for bundle ID: #{app_profiles.count} found")
      
      if app_profiles.count == 0
        UI.important("‚ö†Ô∏è No provisioning profiles found for com.othmanshahrouri.cd.starter.project")
        UI.important("üí° This is likely the root cause - profiles need to be created")
      end
      
    rescue => ex
      UI.error("‚ùå API permissions test failed: #{ex}")
      raise ex
    end
  end

  desc "üèóÔ∏è DIAGNOSTIC: Test Development build (should succeed)"
  lane :diagnostic_dev_build do
    UI.header("üß™ DIAGNOSTIC: Testing Development build (should succeed)")
    UI.message("üîç This will prove the pipeline works - only Distribution certificates are blocked")
    
    setup_api_key
    setup_ci_environment
    
    # Enable automatic signing for development
    update_code_signing_settings(
      use_automatic_signing: true,
      team_id: ENV["DEVELOPMENT_TEAM"],
      targets: ["CD starter project"],
      code_sign_identity: "", # Let Xcode choose
      profile_name: "" # Let Xcode choose
    )
    
    UI.message("üèóÔ∏è Building for Development (testing permissions)...")
    
    begin
      gym(
        project: "CD starter project.xcodeproj",
        scheme: "CD starter project",
        configuration: "Debug",
        export_method: "development",
        output_directory: "./build",
        output_name: "CD_starter_project_DEV",
        clean: true,
        xcargs: "-allowProvisioningUpdates -authenticationKeyPath /tmp/AuthKey_#{ENV['API_KEY_ID']}.p8 -authenticationKeyID #{ENV['API_KEY_ID']} -authenticationKeyIssuerID #{ENV['API_ISSUER_ID']} DEVELOPMENT_TEAM=#{ENV['DEVELOPMENT_TEAM']}",
        export_options: {
          method: "development",
          signingStyle: "automatic",
          teamID: ENV["DEVELOPMENT_TEAM"]
        }
      )
      UI.success("üéâ Development build succeeded!")
      UI.message("üí° This proves your CI setup works - the issue is only with Distribution signing")
    rescue => ex
      UI.error("‚ùå Development build failed: #{ex}")
      raise ex
    end
  end

  desc "‚öôÔ∏è Setup lane: Create missing provisioning profiles"
  lane :setup_profiles do
    UI.header("‚öôÔ∏è Creating missing provisioning profiles")
    
    setup_api_key
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
    
    begin
      # Create Development profile
      UI.message("üì± Creating Development provisioning profile...")
      get_provisioning_profile(
        app_identifier: "com.othmanshahrouri.cd.starter.project",
        api_key: api_key,
        development: true,
        force: true,
        filename: "Development_Profile.mobileprovision"
      )
      UI.success("‚úÖ Development profile created")
      
      # Create App Store profile  
      UI.message("üì± Creating App Store provisioning profile...")
      get_provisioning_profile(
        app_identifier: "com.othmanshahrouri.cd.starter.project",
        api_key: api_key,
        adhoc: false,
        development: false,
        force: true,
        filename: "AppStore_Profile.mobileprovision"
      )
      UI.success("‚úÖ App Store profile created")
      
    rescue => ex
      UI.error("‚ùå Profile creation failed: #{ex}")
      UI.important("üí° This might be due to missing certificates or insufficient permissions")
      raise ex
    end
  end

  desc "üöÄ Build and upload to TestFlight"
  lane :build_and_upload do
    setup_api_key
    setup_ci_environment
    
    # Ensure we have a development certificate for building
    ensure_development_certificate
    
    # Download provisioning profiles
    UI.message("üì± Downloading provisioning profiles...")
    get_provisioning_profile(
      app_identifier: "com.othmanshahrouri.cd.starter.project",
      api_key: lane_context[SharedValues::APP_STORE_CONNECT_API_KEY],
      adhoc: false,
      development: false,
      force: true,
      filename: "AppStore_Profile.mobileprovision"
    )
    
    # Update code signing settings
    update_code_signing_settings(
      use_automatic_signing: true,
      team_id: ENV["DEVELOPMENT_TEAM"],
      targets: ["CD starter project"],
      code_sign_identity: "", # Let Xcode choose
      profile_name: "" # Let Xcode choose
    )

    # Build the app
    gym(
      project: "CD starter project.xcodeproj",
      scheme: "CD starter project",
      configuration: "Release",
      export_method: "app-store",
      output_directory: "./build",
      output_name: "CD_starter_project",
      clean: true,
      xcargs: "-allowProvisioningUpdates -authenticationKeyPath /tmp/AuthKey_#{ENV['API_KEY_ID']}.p8 -authenticationKeyID #{ENV['API_KEY_ID']} -authenticationKeyIssuerID #{ENV['API_ISSUER_ID']} DEVELOPMENT_TEAM=#{ENV['DEVELOPMENT_TEAM']}",
      export_options: {
        method: "app-store",
        signingStyle: "automatic",
        teamID: ENV["DEVELOPMENT_TEAM"]
      }
    )

    # Upload to TestFlight
    upload_to_testflight(
      api_key: lane_context[SharedValues::APP_STORE_CONNECT_API_KEY],
      skip_submission: true,
      skip_waiting_for_build_processing: true
    )
    
    UI.success("üéâ Successfully uploaded to TestFlight!")
  end
end 
